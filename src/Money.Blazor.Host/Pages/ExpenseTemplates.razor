@page "/templates"
@attribute [Authorize]

<Money.Components.Title Icon="redo" Main="Expense Templates" Sub="List of templates for common expenses" ButtonText="New Template" ButtonClick="@(() => { CreateModal.Show(); StateHasChanged(); })" />
<ExceptionPanel />

<ExpenseTemplateCreate @ref="CreateModal" />
<ExpenseTemplateDescription @ref="ChangeDescriptionModal" ExpenseTemplateKey="@Selected?.Key" Description="@Selected?.Description" />

@if (Models.Count == 0)
{
    <Alert Title="No data." Message="Let's add some templates." Mode="@AlertMode.Warning" />
}
else
{
    <div class="row">
        @foreach (var model in Models)
        {
            <div class="col-12 col-sm-6 col-md-4 col-xl-3">
                <div class="card card-hover">
                    <div class="card-body">
                            <h3 class="m-0">
                                @CurrencyFormatter.Format(model.Amount, CurrencyFormatter.FormatZero.Placehoder)
                            </h3>

                        @if (!model.CategoryKey.IsEmpty)
                        {
                            <p class="m-0 @FindCategoryColor(model.CategoryKey)?.SelectAccent("back-dark", "back-light")">
                                <span class="badge" style="background-color: @FindCategoryColor(model.CategoryKey)?.ToHashCode()">@FindCategoryName(model.CategoryKey)</span>
                            </p>
                        }

                        @if (!String.IsNullOrEmpty(model.Description) || model.IsFixed)
                        {
                            <p>
                                @model.Description

                                @if (model.IsFixed)
                                {
                                    <em class="text-muted ml-1">Fixed</em>
                                }
                            </p>
                        }

                        <div class="controls text-right">
                            <IconButton Icon="minus" ToolTip="Create expense" Click="@(() => { Navigator.OpenExpenseCreate(model.Amount, model.Description, model.CategoryKey, model.IsFixed); })" />
                            <IconButton Icon="comment" ToolTip="Change description" Click="@(() => { Selected = model; ChangeDescriptionModal.Show(); StateHasChanged(); })" />
                            <IconButton Icon="trash-alt" ToolTip="Delete" Click="@(() => { ToDeleteKey = model.Key; DeleteMessage = $"Do you really want to delete expense template {(model.Amount != null ? CurrencyFormatter.Format(model.Amount) : null)} '{model.Description}'?"; DeleteConfirm.Show(); StateHasChanged(); })" />
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<Confirm @ref="DeleteConfirm" Message="@DeleteMessage" OnConfirmed="@Delete" />